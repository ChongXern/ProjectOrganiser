package com.huchongxern.project_organiser.service;

import com.huchongxern.project_organiser.model.Lesson;
import com.huchongxern.project_organiser.repository.LessonRepository;
import org.bson.types.ObjectId;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.mongodb.core.MongoTemplate;
import org.springframework.data.mongodb.core.query.Criteria;
import org.springframework.data.mongodb.core.query.Query;
import org.springframework.data.mongodb.core.query.Update;
import org.springframework.stereotype.Service;

import java.util.Date;
import java.util.List;
import java.util.Map;

@Service
public class LessonService {
    @Autowired
    private LessonRepository lessonRepository;
    @Autowired
    private MongoTemplate mongoTemplate; //used for dynamic queries within db w/o repository

    public Lesson createLesson(String lesson_learnt, String application) {
        Lesson lesson = lessonRepository.insert(new Lesson(lesson_learnt, application));

        mongoTemplate.update(Lesson.class)
                .matching(Criteria.where("_id").is(lesson.get_id())) //autogenerated
                .apply(new Update().push("lessons", lesson))
                //executes update operation on first document that matches the criteria
                .first(); //also because only one Lesson item returned
        return lesson;
    }

    public List<Lesson> findLessonsByCategoryAndStatus(String category, boolean doneStatus) {
        Query query = new Query();
        query.addCriteria(Criteria.where("category").is(category).and("_done").is(doneStatus));
        return mongoTemplate.find(query, Lesson.class);
    }

    public List<Lesson> findLessonsByStatus(boolean status){
        Query query = new Query();
        query.addCriteria(Criteria.where("_done").is(status));
        return mongoTemplate.find(query, Lesson.class);
    }

    public List<Lesson> getAllLesssons() {
        return lessonRepository.findAll();
    }

    public Lesson updateLesson(ObjectId lessonId, Lesson newLesson) {
        Lesson existingLesson = fetchLessonOrThrow(lessonId);

        existingLesson.setLessonLearnt(newLesson.getLessonLearnt());
        existingLesson.setCreatedDate(newLesson.getCreatedDate());
        existingLesson.setApplication(newLesson.getApplication());

        return lessonRepository.save(existingLesson);
    }

    private Lesson fetchLessonOrThrow(ObjectId id) {
        return lessonRepository.findById(id)
                .orElseThrow(() -> new RuntimeException("Lesson not found with ID: " + id));
    }

    public void deleteLesson(ObjectId lessonId) {
        if (!lessonRepository.existsById(lessonId)) {
            throw new RuntimeException("Lesson not found with ID: " + lessonId);
        }
        lessonRepository.deleteById(lessonId);
    }

    public Lesson patchLesson(ObjectId id, Map<String, Object> updates) {
        Lesson lesson = fetchLessonOrThrow(id);
        for (Map.Entry<String, Object> entry : updates.entrySet()) {
            String field = entry.getKey();
            Object value = entry.getValue();

            switch (field){
            case "lessonLearnt":
                lesson.setLessonLearnt((String) value);
                break;
            case "application":
                lesson.setApplication((String)value);
                break;
            case "createDate":
                lesson.setCreatedDate((Date) value);
                break;
            default:
                throw new IllegalArgumentException("Invalid field: " + field);
            }
        }
        return lessonRepository.save(lesson);
    }

    public Lesson updateLessonLessonLearnt(ObjectId lessonId, String lessonLearnt) {
        Lesson lesson = fetchLessonOrThrow(lessonId);
        lesson.setLessonLearnt(lessonLearnt);
        return lessonRepository.save(lesson);
    }

    public Lesson updateLessonApplication(ObjectId lessonId, String application) {
        Lesson lesson = fetchLessonOrThrow(lessonId);
        lesson.setApplication(application);
        return lessonRepository.save(lesson);
    }

    public Lesson updateLessonCreatedDate(ObjectId lessonId, Date createdDate) {
        Lesson lesson = fetchLessonOrThrow(lessonId);
        lesson.setCreatedDate(createdDate);
        return lessonRepository.save(lesson);
    }
}
