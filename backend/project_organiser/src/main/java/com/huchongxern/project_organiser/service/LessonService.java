package com.huchongxern.project_organiser.service;

import com.huchongxern.project_organiser.model.Lesson;
import com.huchongxern.project_organiser.repository.LessonRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.mongodb.core.MongoTemplate;
import org.springframework.data.mongodb.core.query.Criteria;
import org.springframework.data.mongodb.core.query.Query;
import org.springframework.data.mongodb.core.query.Update;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class LessonService {
    @Autowired
    private LessonRepository lessonRepository;
    @Autowired
    private MongoTemplate mongoTemplate; //used for dynamic queries within db w/o repository

    public Lesson createLesson(String lesson_learnt, String application) {
        Lesson lesson = new Lesson(lesson_learnt, application);
        lesson.set_created_date();
        lessonRepository.insert(lesson);
        mongoTemplate.update(Lesson.class)
                .matching(Criteria.where("_id").is(lesson.get_id())) //autogenerated
                .apply(new Update().push("lessons", lesson))
                .first();
        return lesson;
    }

    public List<Lesson> findLessonsByCategoryAndStatus(String category, boolean doneStatus) {
        Query query = new Query();
        query.addCriteria(Criteria.where("category").is(category).and("_done").is(doneStatus));
        return mongoTemplate.find(query, Lesson.class);
    }

    public List<Lesson> findLessonsByStatus(boolean status){
        Query query = new Query();
        query.addCriteria(Criteria.where("_done").is(status));
        return mongoTemplate.find(query, Lesson.class);
    }
}
